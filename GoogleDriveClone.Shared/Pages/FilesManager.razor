@page "/files"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using GoogleDriveClone.SharedModels.DTOs
@using GoogleDriveClone.SharedModels.Results
@using GoogleDriveClone.Shared.Auth
@using GoogleDriveClone.Shared.Services
@using GoogleDriveClone.Shared.Utils
@using GoogleDriveClone.Shared.Interfaces
@using System.Text.Json
@inject IFileManagerService FileManagerService
@inject IFileUploadService FileUploadService
@inject IFileDownloadService FileDownloadService
@inject INotificationService NotificationService
@inject IPreferencesService PreferencesService
@inject ISyncService SyncService
@inject IApiConfigService ApiConfigService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Мій диск - Gaming Drive</PageTitle>

<div class="files-workspace @(isDragOver ? "drag-over" : "")" @ref="dragDropZone">
    <!-- Drag and Drop Overlay -->
    <div class="drag-drop-overlay @(isDragOver ? "active" : "")">
        <div class="drop-message">
            <SvgIcon Type="IconType.Upload" Size="48px" />
            <h3>Відпустіть файли для завантаження</h3>
            <p>Файли будуть автоматично завантажені на сервер</p>
            <p><small>Підтримуються зображення, документи, код та архіви до 50 МБ</small></p>
        </div>
    </div>

    <!-- Головна панель з пошуком та діями -->
    <div class="workspace-toolbar">
        <!-- Ліва частина: пошук -->
        <div class="search-zone">
            <div class="search-container">
                <SvgIcon Type="IconType.Search" Size="16px" CssClass="search-icon" />
                <input type="text" class="search-field" placeholder="Знайти файли..." 
                       @bind="searchQuery" @oninput="OnSearchInput" />
            </div>
        </div>
        
        <!-- Центральна частина: статистика -->
        <div class="stats-zone">
            <div class="files-count">
                <span class="count-number">@filteredFiles.Count</span>
                <span class="count-label">@(filteredFiles.Count == 1 ? "файл" : filteredFiles.Count < 5 ? "файли" : "файлів")</span>
            </div>
        </div>
        
        <!-- Права частина: дії та налаштування -->
        <div class="actions-zone">
            <div class="filter-controls">
                <select class="filter-select" @bind="selectedFilter" @bind:after="ApplyFilter">
                    <option value="all">Всі типи</option>
                    <option value="images">Зображення</option>
                    <option value="code">Код</option>
                    <option value="documents">Документи</option>
                    <option value="archives">Архіви</option>
                </select>
                
                <button class="control-button" @onclick="ToggleSort" title="@(sortAscending ? "Сортування: за зростанням" : "Сортування: за спаданням")">
                    <SvgIcon Type="IconType.SortUp" Size="18px" Style="@(sortAscending ? "display: inline;" : "display: none;")" />
                    <SvgIcon Type="IconType.SortDown" Size="18px" Style="@(!sortAscending ? "display: inline;" : "display: none;")" />
                </button>
                
                <button class="control-button @(showMetadata ? "active" : "")" @onclick="ToggleMetadata" title="@(showMetadata ? "Приховати деталі" : "Показати деталі")">
                    <SvgIcon Type="IconType.View" Size="18px" />
                </button>
            </div>
            
            <div class="action-buttons">
                <button class="sync-button @(isSyncing ? "syncing" : "")" @onclick="SyncWithFolder" disabled="@isSyncing" title="@(isSyncing ? "Синхронізація..." : "Синхронізувати з папкою")">
                    <SvgIcon Type="IconType.Sync" Size="18px" CssClass="@(isSyncing ? "icon-spin" : "")" />
                    @(isSyncing ? "Синхронізація..." : "Синхронізувати")
                </button>
                
                <div class="upload-zone">
                    <InputFile OnChange="HandleFileUpload" class="upload-input" id="fileUpload" multiple />
                    <label for="fileUpload" class="upload-button">
                        <SvgIcon Type="IconType.Upload" Size="18px" />
                        Завантажити
                    </label>
                </div>
            </div>
        </div>
    </div>

    <!-- Робочий простір з файлами -->
    <div class="workspace-content @(isDragOver ? "drag-over" : "")">
        @if (isLoading)
        {
            <div class="files-gallery">
                @for (int i = 0; i < 12; i++)
                {
                    <div class="file-tile skeleton-tile">
                        <div class="tile-preview skeleton-shimmer"></div>
                        <div class="tile-info">
                            <div class="skeleton-line skeleton-shimmer"></div>
                            <div class="skeleton-line small skeleton-shimmer"></div>
                        </div>
                    </div>
                }
            </div>
        }
        else if (filteredFiles.Count == 0)
        {
            <div class="empty-workspace">
                <div class="empty-illustration">
                    <SvgIcon Type="IconType.Folder" Size="80px" />
                </div>
                <h3>@(searchQuery.Length > 0 ? "Нічого не знайдено" : "Ваш диск порожній")</h3>
                <p>@(searchQuery.Length > 0 ? "Спробуйте змінити запит або фільтри" : isDragOver ? "Відпустіть файли тут для миттєвого завантаження" : "Завантажте перші файли для початку роботи або просто перетягніть їх сюди")</p>
                
                @if (searchQuery.Length == 0 && !isDragOver)
                {
                    <div class="quick-upload">
                        <InputFile OnChange="HandleFileUpload" class="upload-input" id="quickUpload" multiple />
                        <label for="quickUpload" class="quick-upload-btn">
                            <SvgIcon Type="IconType.Upload" Size="20px" />
                            Завантажити файли
                        </label>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="files-gallery">
                @foreach (var file in filteredFiles)
                {
                    <div class="file-tile">
                        <div class="tile-preview @GetFileTypeClass(file.OriginalName)">
                            <div class="preview-icon">
                                @GetFileIcon(file.OriginalName)
                            </div>
                            <div class="file-actions-overlay">
                                @if (FileManagerService.CanPreviewFile(file.OriginalName))
                                {
                                    <button class="tile-action view-action" @onclick="() => ViewFile(file)" title="Переглянути файл">
                                        <SvgIcon Type="IconType.View" Size="18px" />
                                    </button>
                                }
                                <button class="tile-action download-action" @onclick="() => DownloadFile(file)" title="Завантажити файл">
                                    <SvgIcon Type="IconType.Download" Size="18px" />
                                </button>
                                <button class="tile-action delete-action" @onclick="() => DeleteFile(file)" title="Видалити файл">
                                    <SvgIcon Type="IconType.Delete" Size="18px" />
                                </button>
                            </div>
                        </div>
                        
                        <div class="tile-info">
                            <h4 class="file-title" title="@file.OriginalName">@file.OriginalName</h4>
                            
                            <div class="file-details">
                                <span class="file-size">@FileUtils.FormatFileSize(file.Size)</span>
                                <span class="file-type @GetFileTypeBadgeClass(file.OriginalName)">@GetFileExtension(file.OriginalName)</span>
                            </div>
                            
                            @if (showMetadata)
                            {
                                <div class="file-meta">
                                    <div class="meta-row">
                                        <SvgIcon Type="IconType.Success" Size="12px" />
                                        <span class="meta-label">Створено:</span>
                                        <span class="meta-value">@file.CreatedAt.ToString("dd.MM.yyyy HH:mm")</span>
                                    </div>
                                    <div class="meta-row">
                                        <SvgIcon Type="IconType.Info" Size="12px" />
                                        <span class="meta-label">Змінено:</span>
                                        <span class="meta-value">@((file.ModifiedAt ?? file.CreatedAt).ToString("dd.MM.yyyy HH:mm"))</span>
                                    </div>
                                    <div class="meta-row">
                                        <SvgIcon Type="IconType.User" Size="12px" />
                                        <span class="meta-label">Власник:</span>
                                        <span class="meta-value">@GetUserName(file.OwnerUsername)</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <!-- Модальне вікно перегляду/редагування -->
    @if (showFileViewer && selectedFile != null)
    {
        <div class="file-viewer-backdrop" @onclick="CloseFileViewer">
            <div class="file-viewer-window @(isEditMode ? "edit-mode" : "")" @onclick:stopPropagation="true">
                <div class="viewer-header">
                    <div class="viewer-info">
                        <SvgIcon Type="@(isEditMode ? IconType.Edit : IconType.View)" Size="20px" />
                        <span class="viewer-title">@selectedFile.OriginalName</span>
                        @if (isEditMode)
                        {
                            <span class="edit-badge">Редагування</span>
                        }
                    </div>
                    <div class="viewer-actions">
                        @if (!isEditMode && FileManagerService.CanEditFile(selectedFile.OriginalName))
                        {
                            <button class="viewer-action edit-btn" @onclick="StartEdit" title="Редагувати">
                                <SvgIcon Type="IconType.Edit" Size="18px" />
                            </button>
                        }
                        @if (isEditMode)
                        {
                            <button class="viewer-action save-btn" @onclick="SaveFile" disabled="@isSaving" title="Зберегти зміни">
                                <SvgIcon Type="IconType.Save" Size="18px" CssClass="@(isSaving ? "icon-spin" : "")" />
                            </button>
                        }
                        else
                        {
                            <button class="viewer-action download-btn" @onclick="() => DownloadFile(selectedFile)" title="Завантажити">
                                <SvgIcon Type="IconType.Download" Size="18px" />
                            </button>
                        }
                        <button class="viewer-close" @onclick="CloseFileViewer">
                            <SvgIcon Type="IconType.Close" Size="18px" />
                        </button>
                    </div>
                </div>
                
                <div class="viewer-body">
                    @if (isLoadingContent)
                    {
                        <div class="content-loading">
                            <SvgIcon Type="IconType.Loading" Size="32px" CssClass="icon-spin" />
                            <p>Завантаження вмісту файлу...</p>
                        </div>
                    }
                    else if (selectedFile != null && FileManagerService.IsImageFile(selectedFile.OriginalName) && !string.IsNullOrEmpty(fileDataUri))
                    {
                        <div class="image-preview">
                            <div class="image-container">
                                <img src="@fileDataUri" alt="@selectedFile.OriginalName" class="preview-image" />
                            </div>
                            <div class="image-info">
                                <span class="image-filename">@selectedFile.OriginalName</span>
                                <span class="image-size">@FileUtils.FormatFileSize(selectedFile.Size)</span>
                            </div>
                        </div>
                    }
                    else if (selectedFile != null && FileManagerService.IsPdfFile(selectedFile.OriginalName) && !string.IsNullOrEmpty(fileDataUri))
                    {
                        <div class="pdf-preview">
                            <embed src="@fileDataUri" type="application/pdf" class="preview-pdf" />
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(fileContent))
                    {
                        @if (isEditMode)
                        {
                            <div class="file-editor">
                                <textarea class="editor-textarea" @bind="editedContent" placeholder="Редагуйте вміст файлу..."></textarea>
                                <div class="editor-info">
                                    <span>Рядків: @(editedContent?.Split('\n').Length ?? 0)</span>
                                    <span>Символів: @(editedContent?.Length ?? 0)</span>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="file-preview">
                                <pre class="preview-content">@fileContent</pre>
                            </div>
                        }
                    }
                    else if (selectedFile != null && FileManagerService.CanPreviewFile(selectedFile.OriginalName))
                    {
                        <div class="content-error">
                            <SvgIcon Type="IconType.Error" Size="48px" />
                            <h4>Помилка завантаження</h4>
                            <p>Не вдалося завантажити вміст файлу.</p>
                            <button class="retry-btn" @onclick="() => LoadFileContent(selectedFile.Id)">
                                
                                Спробувати ще раз
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="preview-notice">
                            <div class="notice-icon">
                                <SvgIcon Type="IconType.View" Size="48px" />
                            </div>
                            <h4>Перегляд недоступний</h4>
                            <p>Цей тип файлу не підтримує перегляд.</p>
                            <p>Завантажте файл для відкриття на пристрої.</p>
                            
                            <button class="preview-download" @onclick="() => DownloadFile(selectedFile!)">
                                <SvgIcon Type="IconType.Download" Size="18px" />
                                Завантажити файл
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    <!-- Модальне вікно результатів синхронізації -->
    @if (showSyncResults && syncResult != null)
    {
        <div class="file-viewer-backdrop" @onclick="CloseSyncResults">
            <div class="sync-results-window" @onclick:stopPropagation="true">
                <div class="sync-header">
                    <div class="sync-title">
                        <SvgIcon Type="IconType.Sync" Size="24px" />
                        <h3>Результати синхронізації</h3>
                    </div>
                    <button class="sync-close" @onclick="CloseSyncResults">
                        <SvgIcon Type="IconType.Close" Size="18px" />
                    </button>
                </div>
                
                <div class="sync-content">
                    <div class="sync-summary">
                        <div class="summary-stats">
                            <div class="stat-item success">
                                <SvgIcon Type="IconType.Success" Size="20px" />
                                <span class="stat-label">Успішно</span>
                                <span class="stat-value">@syncResult.SuccessCount</span>
                            </div>
                            @if (syncResult.ErrorCount > 0)
                            {
                                <div class="stat-item error">
                                    <SvgIcon Type="IconType.Error" Size="20px" />
                                    <span class="stat-label">Помилки</span>
                                    <span class="stat-value">@syncResult.ErrorCount</span>
                                </div>
                            }
                            <div class="stat-item info">
                                <SvgIcon Type="IconType.Info" Size="20px" />
                                <span class="stat-label">Всього</span>
                                <span class="stat-value">@(syncResult.NewFiles + syncResult.ReplacedFiles)</span>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(syncResult.ErrorMessage))
                        {
                            <div class="error-message">
                                <SvgIcon Type="IconType.Error" Size="16px" />
                                <span>@syncResult.ErrorMessage</span>
                            </div>
                        }
                    </div>
                    
                    @if (syncResult.Results.Any())
                    {
                        <div class="sync-details">
                            <h4>Деталі операцій:</h4>
                            <div class="results-list">
                                @foreach (var result in syncResult.Results)
                                {
                                    <div class="result-item @(result.Success ? "success" : "error")">
                                        <div class="result-icon">
                                            @if (result.Success)
                                            {
                                                @if (result.Action == "uploaded")
                                                {
                                                    <SvgIcon Type="IconType.Upload" Size="16px" />
                                                }
                                                else
                                                {
                                                    <SvgIcon Type="IconType.Sync" Size="16px" />
                                                }
                                            }
                                            else
                                            {
                                                <SvgIcon Type="IconType.Error" Size="16px" />
                                            }
                                        </div>
                                        <div class="result-info">
                                            <span class="result-filename">@result.FileName</span>
                                            <span class="result-action">
                                                @(result.Action switch {
                                                    "uploaded" => "Додано",
                                                    "replaced" => "Замінено",
                                                    "upload_failed" => "Помилка завантаження",
                                                    "replace_delete_failed" => "Помилка видалення",
                                                    "replace_upload_failed" => "Помилка заміни",
                                                    _ => "Операція"
                                                })
                                            </span>
                                            @if (!string.IsNullOrEmpty(result.Error))
                                            {
                                                <span class="result-error">@result.Error</span>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<FileResponseDto> allFiles = new();
    private List<FileResponseDto> filteredFiles = new();
    private string searchQuery = "";
    private string selectedFilter = "all";
    private bool sortAscending = false;
    private bool showMetadata = true;
    private bool isLoading = true;
    private bool isSyncing = false;
    
    private bool showFileViewer = false;
    private bool isEditMode = false;
    private bool isLoadingContent = false;
    private bool isSaving = false;
    private FileResponseDto? selectedFile;
    private string fileContent = "";
    private string editedContent = "";
    private byte[]? fileBinaryContent;
    private string? fileDataUri;
    private UserPreferences? userPreferences;

    // Sync related fields
    private bool showSyncResults = false;
    private FolderSyncResult? syncResult;

    // Drag and drop related fields
    private bool isDragOver = false;
    private ElementReference dragDropZone;

    private DotNetObjectReference<FilesManager>? dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        dotNetRef = DotNetObjectReference.Create(this);
        await LoadPreferences();
        await LoadFiles();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize API configuration for JavaScript
            await ApiConfigService.InitializeAsync();
            await SetupDragAndDrop();
        }
    }

    private async Task SetupDragAndDrop()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("initializeDragAndDrop", dragDropZone, dotNetRef);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Drag and drop setup failed: {ex.Message}");
        }
    }

    [JSInvokable]
    public void OnDragEnter()
    {
        isDragOver = true;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnDragLeave()
    {
        isDragOver = false;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task ShowUploadProgress(string message)
    {
        await NotificationService.ShowInfoAsync(message);
    }

    [JSInvokable]
    public async Task ShowUploadError(string error)
    {
        await NotificationService.ShowErrorAsync(error);
    }

    [JSInvokable]
    public async Task OnUploadCompleted(JsonElement resultData)
    {
        try
        {
            var totalFiles = resultData.GetProperty("totalFiles").GetInt32();
            var successCount = resultData.GetProperty("successCount").GetInt32();
            var errorCount = resultData.GetProperty("errorCount").GetInt32();
            
            // Show summary notification
            if (errorCount == 0)
            {
                await NotificationService.ShowSuccessAsync($"Успішно завантажено {successCount} з {totalFiles} файлів!");
            }
            else if (successCount > 0)
            {
                await NotificationService.ShowWarningAsync($"Завантажено {successCount} з {totalFiles} файлів. {errorCount} файлів з помилками.");
            }
            else
            {
                await NotificationService.ShowErrorAsync($"Не вдалося завантажити жоден файл з {totalFiles}.");
            }

            // Show individual errors if any
            if (resultData.TryGetProperty("results", out var resultsElement))
            {
                foreach (var result in resultsElement.EnumerateArray())
                {
                    if (result.TryGetProperty("success", out var successElement) && 
                        !successElement.GetBoolean() &&
                        result.TryGetProperty("fileName", out var fileNameElement) &&
                        result.TryGetProperty("error", out var errorElement))
                    {
                        var fileName = fileNameElement.GetString();
                        var error = errorElement.GetString();
                        await NotificationService.ShowErrorAsync($"❌ {fileName}: {error}");
                    }
                }
            }

            // Автоматично оновлюємо список файлів якщо є успішні завантаження
            if (successCount > 0)
            {
                await LoadFiles();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing upload results: {ex.Message}");
            await NotificationService.ShowErrorAsync("Помилка обробки результатів завантаження");
        }
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        FilterFiles();
        StateHasChanged();
    }

    private async Task LoadPreferences()
    {
        var result = await PreferencesService.GetPreferencesAsync();
        if (result.IsSuccess)
        {
            userPreferences = result.Value;
            selectedFilter = userPreferences!.SelectedFilter;
            showMetadata = userPreferences.ShowMetadata;
            sortAscending = userPreferences.SortAscending;
        }
    }

    private async Task SavePreferences()
    {
        if (userPreferences != null)
        {
            userPreferences.SelectedFilter = selectedFilter;
            userPreferences.ShowMetadata = showMetadata;
            userPreferences.SortAscending = sortAscending;
            
            await PreferencesService.SavePreferencesAsync(userPreferences);
        }
    }

    private async Task LoadFiles()
    {
        isLoading = true;
        try
        {
            var result = await FileManagerService.GetFilesAsync();
            
            if (result.IsSuccess)
            {
                allFiles = result.Value ?? new List<FileResponseDto>();
                FilterFiles();
            }
            else
            {
                await NotificationService.ShowErrorAsync($"Не вдалося завантажити файли: {result.Error?.Message}");
                allFiles = new List<FileResponseDto>();
                FilterFiles();
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterFiles()
    {
        var query = searchQuery.ToLower();
        var files = allFiles.AsEnumerable();

        // Пошук по назві файлу
        if (!string.IsNullOrEmpty(query))
        {
            files = files.Where(f => f.OriginalName.ToLower().Contains(query));
        }

        // Фільтр по типу
        var filesList = files.ToList();
        filesList = FileManagerService.FilterFiles(filesList, selectedFilter);
        
        // Сортування
        filteredFiles = FileManagerService.SortFiles(filesList, "created", sortAscending);
    }

    private void ToggleSort()
    {
        sortAscending = !sortAscending;
        FilterFiles();
        _ = SavePreferences();
    }

    private void ToggleMetadata()
    {
        showMetadata = !showMetadata;
        _ = SavePreferences();
    }

    private async Task ApplyFilter()
    {
        FilterFiles();
        await SavePreferences();
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        
        var result = await FileUploadService.UploadFilesAsync(files);
        
        if (result.IsSuccess)
        {
            await LoadFiles();
        }
    }

    // Replaced old SyncFiles method with new folder sync functionality
    private async Task SyncWithFolder()
    {
        isSyncing = true;
        try
        {
            // Check if browser supports folder sync
            var supportResult = await SyncService.IsFolderSyncSupportedAsync();
            if (!supportResult.IsSuccess || !supportResult.Value)
            {
                await NotificationService.ShowWarningAsync(
                    "Ваш браузер не підтримує синхронізацію папок. " +
                    "Використовуйте Chrome 86+ або Edge 86+ для цієї функції. " +
                    "Поки що скористайтеся звичайним завантаженням файлів.");
                return;
            }

            // Perform folder synchronization
            var result = await SyncService.SynchronizeFolderAsync();
            
            if (result.IsSuccess)
            {
                syncResult = result.Value!;
                
                // Reload files to show updated list
                await LoadFiles();
                
                // Show detailed results if there were operations performed
                if ((syncResult.NewFiles + syncResult.ReplacedFiles) > 0 || !string.IsNullOrEmpty(syncResult.ErrorMessage))
                {
                    showSyncResults = true;
                }
                
                StateHasChanged();
            }
            else
            {
                await NotificationService.ShowErrorAsync($"Помилка синхронізації: {result.Error?.Message}");
            }
        }
        finally
        {
            isSyncing = false;
        }
    }

    private void CloseSyncResults()
    {
        showSyncResults = false;
        syncResult = null;
    }

    private async Task ViewFile(FileResponseDto file)
    {
        selectedFile = file;
        isEditMode = false;
        showFileViewer = true;
        await LoadFileContent(file.Id);
    }

    private async Task LoadFileContent(string fileId)
    {
        isLoadingContent = true;
        fileContent = "";
        editedContent = "";
        fileBinaryContent = null;
        fileDataUri = null;
        
        try
        {
            // Визначаємо тип файлу
            if (selectedFile != null)
            {
                if (FileManagerService.IsImageFile(selectedFile.OriginalName) || 
                    FileManagerService.IsPdfFile(selectedFile.OriginalName))
                {
                    // Завантажуємо бінарний файл (зображення або PDF)
                    var binaryResult = await FileManagerService.GetFileBinaryAsync(fileId);
                    
                    if (binaryResult.IsSuccess)
                    {
                        fileBinaryContent = binaryResult.Value;
                        
                        // Створюємо data URI для відображення
                        if (FileManagerService.IsImageFile(selectedFile.OriginalName))
                        {
                            var mimeType = GetImageMimeType(selectedFile.OriginalName);
                            fileDataUri = $"data:{mimeType};base64,{Convert.ToBase64String(fileBinaryContent!)}";
                        }
                        else if (FileManagerService.IsPdfFile(selectedFile.OriginalName))
                        {
                            fileDataUri = $"data:application/pdf;base64,{Convert.ToBase64String(fileBinaryContent!)}";
                        }
                    }
                    else
                    {
                        await NotificationService.ShowErrorAsync($"Не вдалося завантажити файл: {binaryResult.Error?.Message}");
                    }
                }
                else
                {
                    // Завантажуємо текстовий файл
                    var textResult = await FileManagerService.GetFileContentAsync(fileId);
                    
                    if (textResult.IsSuccess)
                    {
                        fileContent = textResult.Value ?? "";
                        editedContent = fileContent;
                    }
                    else
                    {
                        await NotificationService.ShowErrorAsync($"Не вдалося завантажити вміст файлу: {textResult.Error?.Message}");
                    }
                }
            }
        }
        finally
        {
            isLoadingContent = false;
        }
    }

    private void StartEdit()
    {
        isEditMode = true;
        editedContent = fileContent;
    }

    private async Task SaveFile()
    {
        if (selectedFile == null || string.IsNullOrEmpty(editedContent))
            return;

        isSaving = true;
        
        try
        {
            var result = await FileManagerService.UpdateFileContentAsync(selectedFile.Id, editedContent);
            
            if (result.IsSuccess)
            {
                fileContent = editedContent;
                isEditMode = false;
                
                // Оновлюємо інформацію про файл у списку
                var updatedFile = result.Value!;
                var fileIndex = allFiles.FindIndex(f => f.Id == selectedFile.Id);
                if (fileIndex >= 0)
                {
                    allFiles[fileIndex] = updatedFile;
                    selectedFile = updatedFile;
                }
                
                FilterFiles();
                await NotificationService.ShowSuccessAsync($"Файл {selectedFile.OriginalName} успішно збережено!");
            }
            else
            {
                await NotificationService.ShowErrorAsync($"Не вдалося зберегти файл: {result.Error?.Message}");
            }
        }
        finally
        {
            isSaving = false;
        }
    }

    private void CloseFileViewer()
    {
        if (isEditMode)
        {
            editedContent = fileContent;
        }
        
        showFileViewer = false;
        selectedFile = null;
        fileContent = "";
        editedContent = "";
        fileBinaryContent = null;
        fileDataUri = null;
        isEditMode = false;
        isLoadingContent = false;
        isSaving = false;
    }

    private async Task DownloadFile(FileResponseDto file)
    {
        await FileDownloadService.DownloadFileAsync(file.Id, file.OriginalName);
    }

    private async Task DeleteFile(FileResponseDto file)
    {
        var result = await FileManagerService.DeleteFileAsync(file.Id);
        
        if (result.IsSuccess)
        {
            await NotificationService.ShowSuccessAsync($"Файл '{file.OriginalName}' видалено");
            await LoadFiles();
        }
        else
        {
            await NotificationService.ShowErrorAsync($"Не вдалося видалити файл: {result.Error?.Message}");
        }
    }

    // Helper methods
    private string GetFileExtension(string fileName) => Path.GetExtension(fileName).ToUpper().TrimStart('.');
    
    private string GetFileTypeClass(string fileName)
    {
        var extension = Path.GetExtension(fileName).ToLower();
        return extension switch
        {
            ".py" => "file-python",
            ".c" => "file-c", 
            ".cpp" => "file-cpp",
            ".cs" => "file-csharp",
            ".js" => "file-javascript",
            ".html" => "file-html",
            ".css" => "file-css",
            ".jpg" or ".jpeg" or ".png" or ".gif" => "file-image",
            ".txt" or ".md" => "file-text",
            ".pdf" => "file-pdf",
            ".zip" or ".rar" or ".7z" => "file-archive",
            _ => "file-default"
        };
    }
    
    private string GetFileTypeBadgeClass(string fileName)
    {
        var extension = Path.GetExtension(fileName).ToLower();
        return extension switch
        {
            ".py" => "badge-python",
            ".c" => "badge-c", 
            ".cpp" => "badge-cpp",
            ".cs" => "badge-csharp",
            ".js" => "badge-javascript",
            ".html" => "badge-html",
            ".css" => "badge-css",
            ".jpg" or ".jpeg" or ".png" or ".gif" => "badge-image",
            ".txt" or ".md" => "badge-text",
            ".pdf" => "badge-pdf",
            ".zip" or ".rar" or ".7z" => "badge-archive",
            _ => "badge-default"
        };
    }
    
    private RenderFragment GetFileIcon(string fileName)
    {
        var extension = Path.GetExtension(fileName).ToLower();
        var iconType = extension switch
        {
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" => IconType.ImageFile,
            ".py" or ".c" or ".cpp" or ".cs" or ".js" or ".html" or ".css" => IconType.CodeFile,
            ".txt" or ".md" or ".pdf" or ".doc" or ".docx" => IconType.DocumentFile,
            ".zip" or ".rar" or ".7z" => IconType.ArchiveFile,
            _ => IconType.DefaultFile
        };

        return @<SvgIcon Type="iconType" Size="32px" />;
    }
    
    private string GetImageMimeType(string fileName)
    {
        var extension = Path.GetExtension(fileName).ToLowerInvariant();
        return extension switch
        {
            ".jpg" or ".jpeg" => "image/jpeg",
            ".png" => "image/png",
            ".gif" => "image/gif",
            ".bmp" => "image/bmp",
            ".webp" => "image/webp",
            ".svg" => "image/svg+xml",
            _ => "image/jpeg" // fallback
        };
    }
    
    private string GetUserName(string ownerUsername)
    {
        if (string.IsNullOrEmpty(ownerUsername))
            return "Невідомо";
            
        // Якщо це email, повертаємо частину до @
        if (ownerUsername.Contains("@"))
            return ownerUsername.Split('@')[0];
            
        return ownerUsername;
    }
}